<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jindumooc.dao.TestpaperV8Mapper" >
  <resultMap id="BaseResultMap" type="com.jindumooc.pojo.TestpaperV8" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="courseId" property="courseid" jdbcType="INTEGER" />
    <result column="lessonId" property="lessonid" jdbcType="INTEGER" />
    <result column="limitedTime" property="limitedtime" jdbcType="INTEGER" />
    <result column="pattern" property="pattern" jdbcType="VARCHAR" />
    <result column="target" property="target" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="score" property="score" jdbcType="REAL" />
    <result column="itemCount" property="itemcount" jdbcType="INTEGER" />
    <result column="createdUserId" property="createduserid" jdbcType="INTEGER" />
    <result column="createdTime" property="createdtime" jdbcType="INTEGER" />
    <result column="updatedUserId" property="updateduserid" jdbcType="INTEGER" />
    <result column="updatedTime" property="updatedtime" jdbcType="INTEGER" />
    <result column="copyId" property="copyid" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="courseSetId" property="coursesetid" jdbcType="INTEGER" />
    <result column="migrateTestId" property="migratetestid" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jindumooc.pojo.TestpaperV8WithBLOBs" extends="BaseResultMap" >
    <result column="description" property="description" jdbcType="LONGVARCHAR" />
    <result column="passedCondition" property="passedcondition" jdbcType="LONGVARCHAR" />
    <result column="metas" property="metas" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, courseId, lessonId, limitedTime, pattern, target, status, score, itemCount, 
    createdUserId, createdTime, updatedUserId, updatedTime, copyId, type, courseSetId, 
    migrateTestId
  </sql>
  <sql id="Blob_Column_List" >
    description, passedCondition, metas
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jindumooc.pojo.TestpaperV8Example" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from testpaper_v8
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jindumooc.pojo.TestpaperV8Example" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from testpaper_v8
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from testpaper_v8
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from testpaper_v8
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jindumooc.pojo.TestpaperV8Example" >
    delete from testpaper_v8
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jindumooc.pojo.TestpaperV8WithBLOBs" >
    insert into testpaper_v8 (id, name, courseId, 
      lessonId, limitedTime, pattern, 
      target, status, score, 
      itemCount, createdUserId, createdTime, 
      updatedUserId, updatedTime, copyId, 
      type, courseSetId, migrateTestId, 
      description, passedCondition, metas
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{courseid,jdbcType=INTEGER}, 
      #{lessonid,jdbcType=INTEGER}, #{limitedtime,jdbcType=INTEGER}, #{pattern,jdbcType=VARCHAR}, 
      #{target,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{score,jdbcType=REAL}, 
      #{itemcount,jdbcType=INTEGER}, #{createduserid,jdbcType=INTEGER}, #{createdtime,jdbcType=INTEGER}, 
      #{updateduserid,jdbcType=INTEGER}, #{updatedtime,jdbcType=INTEGER}, #{copyid,jdbcType=INTEGER}, 
      #{type,jdbcType=VARCHAR}, #{coursesetid,jdbcType=INTEGER}, #{migratetestid,jdbcType=INTEGER}, 
      #{description,jdbcType=LONGVARCHAR}, #{passedcondition,jdbcType=LONGVARCHAR}, #{metas,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jindumooc.pojo.TestpaperV8WithBLOBs" >
    insert into testpaper_v8
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="courseid != null" >
        courseId,
      </if>
      <if test="lessonid != null" >
        lessonId,
      </if>
      <if test="limitedtime != null" >
        limitedTime,
      </if>
      <if test="pattern != null" >
        pattern,
      </if>
      <if test="target != null" >
        target,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="itemcount != null" >
        itemCount,
      </if>
      <if test="createduserid != null" >
        createdUserId,
      </if>
      <if test="createdtime != null" >
        createdTime,
      </if>
      <if test="updateduserid != null" >
        updatedUserId,
      </if>
      <if test="updatedtime != null" >
        updatedTime,
      </if>
      <if test="copyid != null" >
        copyId,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="coursesetid != null" >
        courseSetId,
      </if>
      <if test="migratetestid != null" >
        migrateTestId,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="passedcondition != null" >
        passedCondition,
      </if>
      <if test="metas != null" >
        metas,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="courseid != null" >
        #{courseid,jdbcType=INTEGER},
      </if>
      <if test="lessonid != null" >
        #{lessonid,jdbcType=INTEGER},
      </if>
      <if test="limitedtime != null" >
        #{limitedtime,jdbcType=INTEGER},
      </if>
      <if test="pattern != null" >
        #{pattern,jdbcType=VARCHAR},
      </if>
      <if test="target != null" >
        #{target,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="score != null" >
        #{score,jdbcType=REAL},
      </if>
      <if test="itemcount != null" >
        #{itemcount,jdbcType=INTEGER},
      </if>
      <if test="createduserid != null" >
        #{createduserid,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="updateduserid != null" >
        #{updateduserid,jdbcType=INTEGER},
      </if>
      <if test="updatedtime != null" >
        #{updatedtime,jdbcType=INTEGER},
      </if>
      <if test="copyid != null" >
        #{copyid,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="coursesetid != null" >
        #{coursesetid,jdbcType=INTEGER},
      </if>
      <if test="migratetestid != null" >
        #{migratetestid,jdbcType=INTEGER},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="passedcondition != null" >
        #{passedcondition,jdbcType=LONGVARCHAR},
      </if>
      <if test="metas != null" >
        #{metas,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jindumooc.pojo.TestpaperV8Example" resultType="java.lang.Integer" >
    select count(*) from testpaper_v8
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update testpaper_v8
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.courseid != null" >
        courseId = #{record.courseid,jdbcType=INTEGER},
      </if>
      <if test="record.lessonid != null" >
        lessonId = #{record.lessonid,jdbcType=INTEGER},
      </if>
      <if test="record.limitedtime != null" >
        limitedTime = #{record.limitedtime,jdbcType=INTEGER},
      </if>
      <if test="record.pattern != null" >
        pattern = #{record.pattern,jdbcType=VARCHAR},
      </if>
      <if test="record.target != null" >
        target = #{record.target,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=REAL},
      </if>
      <if test="record.itemcount != null" >
        itemCount = #{record.itemcount,jdbcType=INTEGER},
      </if>
      <if test="record.createduserid != null" >
        createdUserId = #{record.createduserid,jdbcType=INTEGER},
      </if>
      <if test="record.createdtime != null" >
        createdTime = #{record.createdtime,jdbcType=INTEGER},
      </if>
      <if test="record.updateduserid != null" >
        updatedUserId = #{record.updateduserid,jdbcType=INTEGER},
      </if>
      <if test="record.updatedtime != null" >
        updatedTime = #{record.updatedtime,jdbcType=INTEGER},
      </if>
      <if test="record.copyid != null" >
        copyId = #{record.copyid,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.coursesetid != null" >
        courseSetId = #{record.coursesetid,jdbcType=INTEGER},
      </if>
      <if test="record.migratetestid != null" >
        migrateTestId = #{record.migratetestid,jdbcType=INTEGER},
      </if>
      <if test="record.description != null" >
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.passedcondition != null" >
        passedCondition = #{record.passedcondition,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.metas != null" >
        metas = #{record.metas,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update testpaper_v8
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      courseId = #{record.courseid,jdbcType=INTEGER},
      lessonId = #{record.lessonid,jdbcType=INTEGER},
      limitedTime = #{record.limitedtime,jdbcType=INTEGER},
      pattern = #{record.pattern,jdbcType=VARCHAR},
      target = #{record.target,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      score = #{record.score,jdbcType=REAL},
      itemCount = #{record.itemcount,jdbcType=INTEGER},
      createdUserId = #{record.createduserid,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      updatedUserId = #{record.updateduserid,jdbcType=INTEGER},
      updatedTime = #{record.updatedtime,jdbcType=INTEGER},
      copyId = #{record.copyid,jdbcType=INTEGER},
      type = #{record.type,jdbcType=VARCHAR},
      courseSetId = #{record.coursesetid,jdbcType=INTEGER},
      migrateTestId = #{record.migratetestid,jdbcType=INTEGER},
      description = #{record.description,jdbcType=LONGVARCHAR},
      passedCondition = #{record.passedcondition,jdbcType=LONGVARCHAR},
      metas = #{record.metas,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update testpaper_v8
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      courseId = #{record.courseid,jdbcType=INTEGER},
      lessonId = #{record.lessonid,jdbcType=INTEGER},
      limitedTime = #{record.limitedtime,jdbcType=INTEGER},
      pattern = #{record.pattern,jdbcType=VARCHAR},
      target = #{record.target,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      score = #{record.score,jdbcType=REAL},
      itemCount = #{record.itemcount,jdbcType=INTEGER},
      createdUserId = #{record.createduserid,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      updatedUserId = #{record.updateduserid,jdbcType=INTEGER},
      updatedTime = #{record.updatedtime,jdbcType=INTEGER},
      copyId = #{record.copyid,jdbcType=INTEGER},
      type = #{record.type,jdbcType=VARCHAR},
      courseSetId = #{record.coursesetid,jdbcType=INTEGER},
      migrateTestId = #{record.migratetestid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jindumooc.pojo.TestpaperV8WithBLOBs" >
    update testpaper_v8
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="courseid != null" >
        courseId = #{courseid,jdbcType=INTEGER},
      </if>
      <if test="lessonid != null" >
        lessonId = #{lessonid,jdbcType=INTEGER},
      </if>
      <if test="limitedtime != null" >
        limitedTime = #{limitedtime,jdbcType=INTEGER},
      </if>
      <if test="pattern != null" >
        pattern = #{pattern,jdbcType=VARCHAR},
      </if>
      <if test="target != null" >
        target = #{target,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=REAL},
      </if>
      <if test="itemcount != null" >
        itemCount = #{itemcount,jdbcType=INTEGER},
      </if>
      <if test="createduserid != null" >
        createdUserId = #{createduserid,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        createdTime = #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="updateduserid != null" >
        updatedUserId = #{updateduserid,jdbcType=INTEGER},
      </if>
      <if test="updatedtime != null" >
        updatedTime = #{updatedtime,jdbcType=INTEGER},
      </if>
      <if test="copyid != null" >
        copyId = #{copyid,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="coursesetid != null" >
        courseSetId = #{coursesetid,jdbcType=INTEGER},
      </if>
      <if test="migratetestid != null" >
        migrateTestId = #{migratetestid,jdbcType=INTEGER},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="passedcondition != null" >
        passedCondition = #{passedcondition,jdbcType=LONGVARCHAR},
      </if>
      <if test="metas != null" >
        metas = #{metas,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jindumooc.pojo.TestpaperV8WithBLOBs" >
    update testpaper_v8
    set name = #{name,jdbcType=VARCHAR},
      courseId = #{courseid,jdbcType=INTEGER},
      lessonId = #{lessonid,jdbcType=INTEGER},
      limitedTime = #{limitedtime,jdbcType=INTEGER},
      pattern = #{pattern,jdbcType=VARCHAR},
      target = #{target,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      score = #{score,jdbcType=REAL},
      itemCount = #{itemcount,jdbcType=INTEGER},
      createdUserId = #{createduserid,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=INTEGER},
      updatedUserId = #{updateduserid,jdbcType=INTEGER},
      updatedTime = #{updatedtime,jdbcType=INTEGER},
      copyId = #{copyid,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      courseSetId = #{coursesetid,jdbcType=INTEGER},
      migrateTestId = #{migratetestid,jdbcType=INTEGER},
      description = #{description,jdbcType=LONGVARCHAR},
      passedCondition = #{passedcondition,jdbcType=LONGVARCHAR},
      metas = #{metas,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jindumooc.pojo.TestpaperV8" >
    update testpaper_v8
    set name = #{name,jdbcType=VARCHAR},
      courseId = #{courseid,jdbcType=INTEGER},
      lessonId = #{lessonid,jdbcType=INTEGER},
      limitedTime = #{limitedtime,jdbcType=INTEGER},
      pattern = #{pattern,jdbcType=VARCHAR},
      target = #{target,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      score = #{score,jdbcType=REAL},
      itemCount = #{itemcount,jdbcType=INTEGER},
      createdUserId = #{createduserid,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=INTEGER},
      updatedUserId = #{updateduserid,jdbcType=INTEGER},
      updatedTime = #{updatedtime,jdbcType=INTEGER},
      copyId = #{copyid,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      courseSetId = #{coursesetid,jdbcType=INTEGER},
      migrateTestId = #{migratetestid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>