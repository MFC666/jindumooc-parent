<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jindumooc.dao.OrderRefundMapper" >
  <resultMap id="BaseResultMap" type="com.jindumooc.pojo.OrderRefund" >
    <result column="id" property="id" jdbcType="INTEGER" />
    <result column="orderId" property="orderid" jdbcType="INTEGER" />
    <result column="userId" property="userid" jdbcType="INTEGER" />
    <result column="targetType" property="targettype" jdbcType="VARCHAR" />
    <result column="targetId" property="targetid" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="expectedAmount" property="expectedamount" jdbcType="REAL" />
    <result column="actualAmount" property="actualamount" jdbcType="REAL" />
    <result column="reasonType" property="reasontype" jdbcType="VARCHAR" />
    <result column="reasonNote" property="reasonnote" jdbcType="VARCHAR" />
    <result column="updatedTime" property="updatedtime" jdbcType="INTEGER" />
    <result column="createdTime" property="createdtime" jdbcType="INTEGER" />
    <result column="operator" property="operator" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, orderId, userId, targetType, targetId, status, expectedAmount, actualAmount, 
    reasonType, reasonNote, updatedTime, createdTime, operator
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jindumooc.pojo.OrderRefundExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order_refund
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.jindumooc.pojo.OrderRefundExample" >
    delete from order_refund
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jindumooc.pojo.OrderRefund" >
    insert into order_refund (id, orderId, userId, 
      targetType, targetId, status, 
      expectedAmount, actualAmount, reasonType, 
      reasonNote, updatedTime, createdTime, 
      operator)
    values (#{id,jdbcType=INTEGER}, #{orderid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, 
      #{targettype,jdbcType=VARCHAR}, #{targetid,jdbcType=INTEGER}, #{status,jdbcType=CHAR}, 
      #{expectedamount,jdbcType=REAL}, #{actualamount,jdbcType=REAL}, #{reasontype,jdbcType=VARCHAR}, 
      #{reasonnote,jdbcType=VARCHAR}, #{updatedtime,jdbcType=INTEGER}, #{createdtime,jdbcType=INTEGER}, 
      #{operator,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.jindumooc.pojo.OrderRefund" >
    insert into order_refund
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderid != null" >
        orderId,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="targettype != null" >
        targetType,
      </if>
      <if test="targetid != null" >
        targetId,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="expectedamount != null" >
        expectedAmount,
      </if>
      <if test="actualamount != null" >
        actualAmount,
      </if>
      <if test="reasontype != null" >
        reasonType,
      </if>
      <if test="reasonnote != null" >
        reasonNote,
      </if>
      <if test="updatedtime != null" >
        updatedTime,
      </if>
      <if test="createdtime != null" >
        createdTime,
      </if>
      <if test="operator != null" >
        operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderid != null" >
        #{orderid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="targettype != null" >
        #{targettype,jdbcType=VARCHAR},
      </if>
      <if test="targetid != null" >
        #{targetid,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=CHAR},
      </if>
      <if test="expectedamount != null" >
        #{expectedamount,jdbcType=REAL},
      </if>
      <if test="actualamount != null" >
        #{actualamount,jdbcType=REAL},
      </if>
      <if test="reasontype != null" >
        #{reasontype,jdbcType=VARCHAR},
      </if>
      <if test="reasonnote != null" >
        #{reasonnote,jdbcType=VARCHAR},
      </if>
      <if test="updatedtime != null" >
        #{updatedtime,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jindumooc.pojo.OrderRefundExample" resultType="java.lang.Integer" >
    select count(*) from order_refund
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update order_refund
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderid != null" >
        orderId = #{record.orderid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.targettype != null" >
        targetType = #{record.targettype,jdbcType=VARCHAR},
      </if>
      <if test="record.targetid != null" >
        targetId = #{record.targetid,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.expectedamount != null" >
        expectedAmount = #{record.expectedamount,jdbcType=REAL},
      </if>
      <if test="record.actualamount != null" >
        actualAmount = #{record.actualamount,jdbcType=REAL},
      </if>
      <if test="record.reasontype != null" >
        reasonType = #{record.reasontype,jdbcType=VARCHAR},
      </if>
      <if test="record.reasonnote != null" >
        reasonNote = #{record.reasonnote,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedtime != null" >
        updatedTime = #{record.updatedtime,jdbcType=INTEGER},
      </if>
      <if test="record.createdtime != null" >
        createdTime = #{record.createdtime,jdbcType=INTEGER},
      </if>
      <if test="record.operator != null" >
        operator = #{record.operator,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update order_refund
    set id = #{record.id,jdbcType=INTEGER},
      orderId = #{record.orderid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      targetType = #{record.targettype,jdbcType=VARCHAR},
      targetId = #{record.targetid,jdbcType=INTEGER},
      status = #{record.status,jdbcType=CHAR},
      expectedAmount = #{record.expectedamount,jdbcType=REAL},
      actualAmount = #{record.actualamount,jdbcType=REAL},
      reasonType = #{record.reasontype,jdbcType=VARCHAR},
      reasonNote = #{record.reasonnote,jdbcType=VARCHAR},
      updatedTime = #{record.updatedtime,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      operator = #{record.operator,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>