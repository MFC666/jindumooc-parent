<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jindumooc.dao.BlockMapper" >
  <resultMap id="BaseResultMap" type="com.jindumooc.pojo.Block" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userId" property="userid" jdbcType="INTEGER" />
    <result column="blockTemplateId" property="blocktemplateid" jdbcType="INTEGER" />
    <result column="orgId" property="orgid" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="createdTime" property="createdtime" jdbcType="INTEGER" />
    <result column="updateTime" property="updatetime" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jindumooc.pojo.BlockWithBLOBs" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
    <result column="meta" property="meta" jdbcType="LONGVARCHAR" />
    <result column="data" property="data" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, userId, blockTemplateId, orgId, code, createdTime, updateTime
  </sql>
  <sql id="Blob_Column_List" >
    content, meta, data
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jindumooc.pojo.BlockExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jindumooc.pojo.BlockExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from block
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from block
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jindumooc.pojo.BlockExample" >
    delete from block
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jindumooc.pojo.BlockWithBLOBs" >
    insert into block (id, userId, blockTemplateId, 
      orgId, code, createdTime, 
      updateTime, content, meta, 
      data)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{blocktemplateid,jdbcType=INTEGER}, 
      #{orgid,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{createdtime,jdbcType=INTEGER}, 
      #{updatetime,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}, #{meta,jdbcType=LONGVARCHAR}, 
      #{data,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.jindumooc.pojo.BlockWithBLOBs" >
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="blocktemplateid != null" >
        blockTemplateId,
      </if>
      <if test="orgid != null" >
        orgId,
      </if>
      <if test="code != null" >
        code,
      </if>
      <if test="createdtime != null" >
        createdTime,
      </if>
      <if test="updatetime != null" >
        updateTime,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="meta != null" >
        meta,
      </if>
      <if test="data != null" >
        data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="blocktemplateid != null" >
        #{blocktemplateid,jdbcType=INTEGER},
      </if>
      <if test="orgid != null" >
        #{orgid,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="createdtime != null" >
        #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="meta != null" >
        #{meta,jdbcType=LONGVARCHAR},
      </if>
      <if test="data != null" >
        #{data,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jindumooc.pojo.BlockExample" resultType="java.lang.Integer" >
    select count(*) from block
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update block
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.blocktemplateid != null" >
        blockTemplateId = #{record.blocktemplateid,jdbcType=INTEGER},
      </if>
      <if test="record.orgid != null" >
        orgId = #{record.orgid,jdbcType=INTEGER},
      </if>
      <if test="record.code != null" >
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.createdtime != null" >
        createdTime = #{record.createdtime,jdbcType=INTEGER},
      </if>
      <if test="record.updatetime != null" >
        updateTime = #{record.updatetime,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.meta != null" >
        meta = #{record.meta,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.data != null" >
        data = #{record.data,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update block
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      blockTemplateId = #{record.blocktemplateid,jdbcType=INTEGER},
      orgId = #{record.orgid,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      updateTime = #{record.updatetime,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR},
      meta = #{record.meta,jdbcType=LONGVARCHAR},
      data = #{record.data,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update block
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      blockTemplateId = #{record.blocktemplateid,jdbcType=INTEGER},
      orgId = #{record.orgid,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      updateTime = #{record.updatetime,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jindumooc.pojo.BlockWithBLOBs" >
    update block
    <set >
      <if test="userid != null" >
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="blocktemplateid != null" >
        blockTemplateId = #{blocktemplateid,jdbcType=INTEGER},
      </if>
      <if test="orgid != null" >
        orgId = #{orgid,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="createdtime != null" >
        createdTime = #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null" >
        updateTime = #{updatetime,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="meta != null" >
        meta = #{meta,jdbcType=LONGVARCHAR},
      </if>
      <if test="data != null" >
        data = #{data,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jindumooc.pojo.BlockWithBLOBs" >
    update block
    set userId = #{userid,jdbcType=INTEGER},
      blockTemplateId = #{blocktemplateid,jdbcType=INTEGER},
      orgId = #{orgid,jdbcType=INTEGER},
      code = #{code,jdbcType=VARCHAR},
      createdTime = #{createdtime,jdbcType=INTEGER},
      updateTime = #{updatetime,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR},
      meta = #{meta,jdbcType=LONGVARCHAR},
      data = #{data,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jindumooc.pojo.Block" >
    update block
    set userId = #{userid,jdbcType=INTEGER},
      blockTemplateId = #{blocktemplateid,jdbcType=INTEGER},
      orgId = #{orgid,jdbcType=INTEGER},
      code = #{code,jdbcType=VARCHAR},
      createdTime = #{createdtime,jdbcType=INTEGER},
      updateTime = #{updatetime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>