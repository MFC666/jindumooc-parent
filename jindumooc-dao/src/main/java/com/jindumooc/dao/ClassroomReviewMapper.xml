<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jindumooc.dao.ClassroomReviewMapper" >
  <resultMap id="BaseResultMap" type="com.jindumooc.pojo.ClassroomReview" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userId" property="userid" jdbcType="INTEGER" />
    <result column="classroomId" property="classroomid" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="rating" property="rating" jdbcType="INTEGER" />
    <result column="createdTime" property="createdtime" jdbcType="INTEGER" />
    <result column="parentId" property="parentid" jdbcType="INTEGER" />
    <result column="updatedTime" property="updatedtime" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jindumooc.pojo.ClassroomReviewWithBLOBs" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
    <result column="meta" property="meta" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, userId, classroomId, title, rating, createdTime, parentId, updatedTime
  </sql>
  <sql id="Blob_Column_List" >
    content, meta
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jindumooc.pojo.ClassroomReviewExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from classroom_review
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jindumooc.pojo.ClassroomReviewExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from classroom_review
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from classroom_review
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from classroom_review
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jindumooc.pojo.ClassroomReviewExample" >
    delete from classroom_review
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jindumooc.pojo.ClassroomReviewWithBLOBs" >
    insert into classroom_review (id, userId, classroomId, 
      title, rating, createdTime, 
      parentId, updatedTime, content, 
      meta)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{classroomid,jdbcType=INTEGER}, 
      #{title,jdbcType=VARCHAR}, #{rating,jdbcType=INTEGER}, #{createdtime,jdbcType=INTEGER}, 
      #{parentid,jdbcType=INTEGER}, #{updatedtime,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}, 
      #{meta,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.jindumooc.pojo.ClassroomReviewWithBLOBs" >
    insert into classroom_review
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="classroomid != null" >
        classroomId,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="rating != null" >
        rating,
      </if>
      <if test="createdtime != null" >
        createdTime,
      </if>
      <if test="parentid != null" >
        parentId,
      </if>
      <if test="updatedtime != null" >
        updatedTime,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="meta != null" >
        meta,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="classroomid != null" >
        #{classroomid,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="rating != null" >
        #{rating,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="parentid != null" >
        #{parentid,jdbcType=INTEGER},
      </if>
      <if test="updatedtime != null" >
        #{updatedtime,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="meta != null" >
        #{meta,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jindumooc.pojo.ClassroomReviewExample" resultType="java.lang.Integer" >
    select count(*) from classroom_review
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update classroom_review
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.classroomid != null" >
        classroomId = #{record.classroomid,jdbcType=INTEGER},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.rating != null" >
        rating = #{record.rating,jdbcType=INTEGER},
      </if>
      <if test="record.createdtime != null" >
        createdTime = #{record.createdtime,jdbcType=INTEGER},
      </if>
      <if test="record.parentid != null" >
        parentId = #{record.parentid,jdbcType=INTEGER},
      </if>
      <if test="record.updatedtime != null" >
        updatedTime = #{record.updatedtime,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.meta != null" >
        meta = #{record.meta,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update classroom_review
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      classroomId = #{record.classroomid,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      rating = #{record.rating,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      parentId = #{record.parentid,jdbcType=INTEGER},
      updatedTime = #{record.updatedtime,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR},
      meta = #{record.meta,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update classroom_review
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      classroomId = #{record.classroomid,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      rating = #{record.rating,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      parentId = #{record.parentid,jdbcType=INTEGER},
      updatedTime = #{record.updatedtime,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jindumooc.pojo.ClassroomReviewWithBLOBs" >
    update classroom_review
    <set >
      <if test="userid != null" >
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="classroomid != null" >
        classroomId = #{classroomid,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="rating != null" >
        rating = #{rating,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        createdTime = #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="parentid != null" >
        parentId = #{parentid,jdbcType=INTEGER},
      </if>
      <if test="updatedtime != null" >
        updatedTime = #{updatedtime,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="meta != null" >
        meta = #{meta,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jindumooc.pojo.ClassroomReviewWithBLOBs" >
    update classroom_review
    set userId = #{userid,jdbcType=INTEGER},
      classroomId = #{classroomid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      rating = #{rating,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=INTEGER},
      parentId = #{parentid,jdbcType=INTEGER},
      updatedTime = #{updatedtime,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR},
      meta = #{meta,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jindumooc.pojo.ClassroomReview" >
    update classroom_review
    set userId = #{userid,jdbcType=INTEGER},
      classroomId = #{classroomid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      rating = #{rating,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=INTEGER},
      parentId = #{parentid,jdbcType=INTEGER},
      updatedTime = #{updatedtime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getClassroomReview" resultMap="ClassroomReviewMap">
    SELECT u.nickname,r.userId,r.id,r.content,r.createdTime,r.updatedTime,r.title,r.rating
    FROM `user` u,classroom_review r
    WHERE u.id = r.userId AND r.parentId = #{parentId} AND r.classroomId = #{classroomId}
  </select>
  <resultMap id="ClassroomReviewMap" type="com.jindumooc.vojo.classes.ClassReview">
    <result property="nickName" column="nickname" jdbcType="VARCHAR"/>
    <result property="id" column="id" jdbcType="INTEGER"/>
    <result property="userId" column="userId" jdbcType="INTEGER"/>
    <result property="title" column="title" jdbcType="VARCHAR"/>
    <result property="content" column="content" jdbcType="VARCHAR"/>
    <result property="rating" column="rating" jdbcType="INTEGER"/>
    <result property="createdTime" column="createdTime" jdbcType="INTEGER"/>
    <result property="updateTime" column="updatedTime" jdbcType="INTEGER"/>
  </resultMap>
  <insert id="setClassroomReview" parameterType="com.jindumooc.dto.classes.ClassroomReviewDTO">
    INSERT INTO classroom_review(userId,classroomId,content,rating,createdTime,parentId,updatedTime)
    VALUES(#{userId,jdbcType=INTEGER},#{classroomId,jdbcType=INTEGER},#{title,jdbcType=VARCHAR},#{rating,jdbcType=INTEGER},#{createdTime,jdbcType=INTEGER},#{parentId,jdbcType=INTEGER},#{updateTime,jdbcType=INTEGER});
  </insert>
</mapper>