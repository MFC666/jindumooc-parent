<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jindumooc.dao.OpenCourseMemberMapper" >
  <resultMap id="BaseResultMap" type="com.jindumooc.pojo.OpenCourseMember" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="courseId" property="courseid" jdbcType="INTEGER" />
    <result column="userId" property="userid" jdbcType="INTEGER" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="learnedNum" property="learnednum" jdbcType="INTEGER" />
    <result column="learnTime" property="learntime" jdbcType="INTEGER" />
    <result column="seq" property="seq" jdbcType="INTEGER" />
    <result column="isVisible" property="isvisible" jdbcType="TINYINT" />
    <result column="role" property="role" jdbcType="CHAR" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="lastEnterTime" property="lastentertime" jdbcType="INTEGER" />
    <result column="isNotified" property="isnotified" jdbcType="INTEGER" />
    <result column="createdTime" property="createdtime" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, courseId, userId, mobile, learnedNum, learnTime, seq, isVisible, role, ip, lastEnterTime, 
    isNotified, createdTime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jindumooc.pojo.OpenCourseMemberExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from open_course_member
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from open_course_member
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from open_course_member
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jindumooc.pojo.OpenCourseMemberExample" >
    delete from open_course_member
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jindumooc.pojo.OpenCourseMember" >
    insert into open_course_member (id, courseId, userId, 
      mobile, learnedNum, learnTime, 
      seq, isVisible, role, 
      ip, lastEnterTime, isNotified, 
      createdTime)
    values (#{id,jdbcType=INTEGER}, #{courseid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, 
      #{mobile,jdbcType=VARCHAR}, #{learnednum,jdbcType=INTEGER}, #{learntime,jdbcType=INTEGER}, 
      #{seq,jdbcType=INTEGER}, #{isvisible,jdbcType=TINYINT}, #{role,jdbcType=CHAR}, 
      #{ip,jdbcType=VARCHAR}, #{lastentertime,jdbcType=INTEGER}, #{isnotified,jdbcType=INTEGER}, 
      #{createdtime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.jindumooc.pojo.OpenCourseMember" >
    insert into open_course_member
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="courseid != null" >
        courseId,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="learnednum != null" >
        learnedNum,
      </if>
      <if test="learntime != null" >
        learnTime,
      </if>
      <if test="seq != null" >
        seq,
      </if>
      <if test="isvisible != null" >
        isVisible,
      </if>
      <if test="role != null" >
        role,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="lastentertime != null" >
        lastEnterTime,
      </if>
      <if test="isnotified != null" >
        isNotified,
      </if>
      <if test="createdtime != null" >
        createdTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="courseid != null" >
        #{courseid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="learnednum != null" >
        #{learnednum,jdbcType=INTEGER},
      </if>
      <if test="learntime != null" >
        #{learntime,jdbcType=INTEGER},
      </if>
      <if test="seq != null" >
        #{seq,jdbcType=INTEGER},
      </if>
      <if test="isvisible != null" >
        #{isvisible,jdbcType=TINYINT},
      </if>
      <if test="role != null" >
        #{role,jdbcType=CHAR},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="lastentertime != null" >
        #{lastentertime,jdbcType=INTEGER},
      </if>
      <if test="isnotified != null" >
        #{isnotified,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        #{createdtime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jindumooc.pojo.OpenCourseMemberExample" resultType="java.lang.Integer" >
    select count(*) from open_course_member
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update open_course_member
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.courseid != null" >
        courseId = #{record.courseid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.mobile != null" >
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.learnednum != null" >
        learnedNum = #{record.learnednum,jdbcType=INTEGER},
      </if>
      <if test="record.learntime != null" >
        learnTime = #{record.learntime,jdbcType=INTEGER},
      </if>
      <if test="record.seq != null" >
        seq = #{record.seq,jdbcType=INTEGER},
      </if>
      <if test="record.isvisible != null" >
        isVisible = #{record.isvisible,jdbcType=TINYINT},
      </if>
      <if test="record.role != null" >
        role = #{record.role,jdbcType=CHAR},
      </if>
      <if test="record.ip != null" >
        ip = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.lastentertime != null" >
        lastEnterTime = #{record.lastentertime,jdbcType=INTEGER},
      </if>
      <if test="record.isnotified != null" >
        isNotified = #{record.isnotified,jdbcType=INTEGER},
      </if>
      <if test="record.createdtime != null" >
        createdTime = #{record.createdtime,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update open_course_member
    set id = #{record.id,jdbcType=INTEGER},
      courseId = #{record.courseid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      learnedNum = #{record.learnednum,jdbcType=INTEGER},
      learnTime = #{record.learntime,jdbcType=INTEGER},
      seq = #{record.seq,jdbcType=INTEGER},
      isVisible = #{record.isvisible,jdbcType=TINYINT},
      role = #{record.role,jdbcType=CHAR},
      ip = #{record.ip,jdbcType=VARCHAR},
      lastEnterTime = #{record.lastentertime,jdbcType=INTEGER},
      isNotified = #{record.isnotified,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jindumooc.pojo.OpenCourseMember" >
    update open_course_member
    <set >
      <if test="courseid != null" >
        courseId = #{courseid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="learnednum != null" >
        learnedNum = #{learnednum,jdbcType=INTEGER},
      </if>
      <if test="learntime != null" >
        learnTime = #{learntime,jdbcType=INTEGER},
      </if>
      <if test="seq != null" >
        seq = #{seq,jdbcType=INTEGER},
      </if>
      <if test="isvisible != null" >
        isVisible = #{isvisible,jdbcType=TINYINT},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=CHAR},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="lastentertime != null" >
        lastEnterTime = #{lastentertime,jdbcType=INTEGER},
      </if>
      <if test="isnotified != null" >
        isNotified = #{isnotified,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        createdTime = #{createdtime,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jindumooc.pojo.OpenCourseMember" >
    update open_course_member
    set courseId = #{courseid,jdbcType=INTEGER},
      userId = #{userid,jdbcType=INTEGER},
      mobile = #{mobile,jdbcType=VARCHAR},
      learnedNum = #{learnednum,jdbcType=INTEGER},
      learnTime = #{learntime,jdbcType=INTEGER},
      seq = #{seq,jdbcType=INTEGER},
      isVisible = #{isvisible,jdbcType=TINYINT},
      role = #{role,jdbcType=CHAR},
      ip = #{ip,jdbcType=VARCHAR},
      lastEnterTime = #{lastentertime,jdbcType=INTEGER},
      isNotified = #{isnotified,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>