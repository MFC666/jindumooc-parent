<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jindumooc.dao.BatchNotificationMapper" >
  <resultMap id="BaseResultMap" type="com.jindumooc.pojo.BatchNotification" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="CHAR" />
    <result column="fromId" property="fromid" jdbcType="INTEGER" />
    <result column="targetId" property="targetid" jdbcType="INTEGER" />
    <result column="createdTime" property="createdtime" jdbcType="INTEGER" />
    <result column="published" property="published" jdbcType="INTEGER" />
    <result column="sendedTime" property="sendedtime" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jindumooc.pojo.BatchNotificationWithBLOBs" extends="BaseResultMap" >
    <result column="title" property="title" jdbcType="LONGVARCHAR" />
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
    <result column="targetType" property="targettype" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, type, fromId, targetId, createdTime, published, sendedTime
  </sql>
  <sql id="Blob_Column_List" >
    title, content, targetType
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jindumooc.pojo.BatchNotificationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from batch_notification
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jindumooc.pojo.BatchNotificationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from batch_notification
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from batch_notification
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from batch_notification
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jindumooc.pojo.BatchNotificationExample" >
    delete from batch_notification
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jindumooc.pojo.BatchNotificationWithBLOBs" >
    insert into batch_notification (id, type, fromId, 
      targetId, createdTime, published, 
      sendedTime, title, content, 
      targetType)
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=CHAR}, #{fromid,jdbcType=INTEGER}, 
      #{targetid,jdbcType=INTEGER}, #{createdtime,jdbcType=INTEGER}, #{published,jdbcType=INTEGER}, 
      #{sendedtime,jdbcType=INTEGER}, #{title,jdbcType=LONGVARCHAR}, #{content,jdbcType=LONGVARCHAR}, 
      #{targettype,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.jindumooc.pojo.BatchNotificationWithBLOBs" >
    insert into batch_notification
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="fromid != null" >
        fromId,
      </if>
      <if test="targetid != null" >
        targetId,
      </if>
      <if test="createdtime != null" >
        createdTime,
      </if>
      <if test="published != null" >
        published,
      </if>
      <if test="sendedtime != null" >
        sendedTime,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="targettype != null" >
        targetType,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=CHAR},
      </if>
      <if test="fromid != null" >
        #{fromid,jdbcType=INTEGER},
      </if>
      <if test="targetid != null" >
        #{targetid,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="published != null" >
        #{published,jdbcType=INTEGER},
      </if>
      <if test="sendedtime != null" >
        #{sendedtime,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=LONGVARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="targettype != null" >
        #{targettype,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jindumooc.pojo.BatchNotificationExample" resultType="java.lang.Integer" >
    select count(*) from batch_notification
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update batch_notification
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.fromid != null" >
        fromId = #{record.fromid,jdbcType=INTEGER},
      </if>
      <if test="record.targetid != null" >
        targetId = #{record.targetid,jdbcType=INTEGER},
      </if>
      <if test="record.createdtime != null" >
        createdTime = #{record.createdtime,jdbcType=INTEGER},
      </if>
      <if test="record.published != null" >
        published = #{record.published,jdbcType=INTEGER},
      </if>
      <if test="record.sendedtime != null" >
        sendedTime = #{record.sendedtime,jdbcType=INTEGER},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.targettype != null" >
        targetType = #{record.targettype,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update batch_notification
    set id = #{record.id,jdbcType=INTEGER},
      type = #{record.type,jdbcType=CHAR},
      fromId = #{record.fromid,jdbcType=INTEGER},
      targetId = #{record.targetid,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      published = #{record.published,jdbcType=INTEGER},
      sendedTime = #{record.sendedtime,jdbcType=INTEGER},
      title = #{record.title,jdbcType=LONGVARCHAR},
      content = #{record.content,jdbcType=LONGVARCHAR},
      targetType = #{record.targettype,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update batch_notification
    set id = #{record.id,jdbcType=INTEGER},
      type = #{record.type,jdbcType=CHAR},
      fromId = #{record.fromid,jdbcType=INTEGER},
      targetId = #{record.targetid,jdbcType=INTEGER},
      createdTime = #{record.createdtime,jdbcType=INTEGER},
      published = #{record.published,jdbcType=INTEGER},
      sendedTime = #{record.sendedtime,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jindumooc.pojo.BatchNotificationWithBLOBs" >
    update batch_notification
    <set >
      <if test="type != null" >
        type = #{type,jdbcType=CHAR},
      </if>
      <if test="fromid != null" >
        fromId = #{fromid,jdbcType=INTEGER},
      </if>
      <if test="targetid != null" >
        targetId = #{targetid,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null" >
        createdTime = #{createdtime,jdbcType=INTEGER},
      </if>
      <if test="published != null" >
        published = #{published,jdbcType=INTEGER},
      </if>
      <if test="sendedtime != null" >
        sendedTime = #{sendedtime,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=LONGVARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="targettype != null" >
        targetType = #{targettype,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jindumooc.pojo.BatchNotificationWithBLOBs" >
    update batch_notification
    set type = #{type,jdbcType=CHAR},
      fromId = #{fromid,jdbcType=INTEGER},
      targetId = #{targetid,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=INTEGER},
      published = #{published,jdbcType=INTEGER},
      sendedTime = #{sendedtime,jdbcType=INTEGER},
      title = #{title,jdbcType=LONGVARCHAR},
      content = #{content,jdbcType=LONGVARCHAR},
      targetType = #{targettype,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jindumooc.pojo.BatchNotification" >
    update batch_notification
    set type = #{type,jdbcType=CHAR},
      fromId = #{fromid,jdbcType=INTEGER},
      targetId = #{targetid,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=INTEGER},
      published = #{published,jdbcType=INTEGER},
      sendedTime = #{sendedtime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>